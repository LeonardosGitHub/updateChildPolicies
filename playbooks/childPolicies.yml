---
- name: Update Child Policies to disable "Header name with no header value"
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    bigiq: <bigiq_ip_or_hostname>
    user: <username>
    loginProviderName: <nameOfLoginProvider>
    childPoliciesDict: {}
  
  vars_prompt:
    - name: password
      prompt: "Enter Password"
      private: yes

    - name: parentPolicy
      prompt: "Copy and paste your Parent Policy name here"
      private: no

  tasks:

  - name: POST - BIG-IQ access token & refresh token
    uri:
      url: "https://{{bigiq}}/mgmt/shared/authn/login"
      method: POST
      body:
        username: "{{user}}"
        password: "{{password}}"
        loginProviderName: "{{loginProviderName}}"
      body_format: json
      validate_certs: no
    delegate_to: localhost
    register: getBigiqTokens

  - name: Print result of get tokens
    debug:
      msg: "{{getBigiqTokens}}"
      verbosity: 1

  - name: Set_fact - create variable with access token and refreshToken
    set_fact:
      bigiqTokens: "{{ getBigiqTokens | json_query(query_json) }}"
    vars: 
      query_json: >
        {"accessToken": json.token.token, "refreshToken": json.refreshToken.token}

  - name: GET - information of parent policy
    uri:
      url: "https://{{bigiq}}/mgmt/cm/asm/working-config/policies/?$filter=name%20eq%20%27{{parentPolicy}}%27&$select=id,name"
      method: GET
      validate_certs: no
      headers:
        X-F5-Auth-Token: "{{bigiqTokens.accessToken}}"
    delegate_to: localhost
    register: parentPolicies
  
  - name: Print result of get for parent policies
    debug:
      msg: "{{parentPolicies}}"
      verbosity: 1

  - name: Set_fact - create variable with parent policies id
    set_fact: 
      parentPolicyID: "{{ parentPolicies | json_query('json.items[0].id') }}"

  - name: Print parent policy ID variable
    debug:
      msg: "{{ parentPolicyID }}"
      verbosity: 1
  
  - name: Get value of "Header name with no header value" on parent policy to set if it should be enabled|disabled(true|false)
    uri:
      url: "https://{{bigiq}}/mgmt/cm/asm/working-config/policies/{{parentPolicyID}}/http-protocols/4dafc3c8-1e91-39ba-a20d-46c47cffa34d?$select=enabled"
      method: GET
      validate_certs: no
      headers:
        X-F5-Auth-Token: "{{bigiqTokens.accessToken}}"
    delegate_to: localhost
    register: parentPolicyHttps

  - name: Print result of get for parent policies "Header name with no header value"
    debug:
      msg: "{{parentPolicyHttps}}"
      verbosity: 1

  - name: Set_fact - create variable to true|false based on parent policy value for "Header name with no header value"
    set_fact: 
      stateOfHeadNoValue: "{{ parentPolicyHttps | json_query('json.enabled') }}"

  - name: GET - list of child policies tied to parent policy
    uri:
      url: "https://{{bigiq}}/mgmt/cm/asm/working-config/policies?$filter=parentPolicyReference/id%20eq%20%27{{parentPolicyID}}%27&$expand=sectionReference,httpProtocolsReference"
      method: GET
      validate_certs: no
      headers:
        X-F5-Auth-Token: "{{bigiqTokens.accessToken}}"
    delegate_to: localhost
    register: childPolicies

  - name: Print results of GET for child policies
    debug:
      msg: "{{ childPolicies }}"
      verbosity: 1

  - name: Set_fact - set variable to number of childPolicies
    set_fact:
      numChildPolicies: "{{ childPolicies | json_query('json.items[] | length(@)') }}"

  - name: Set_fact - Create dictionary with child policy name, policyID, and if http-protocol-compliance has been declined
    set_fact:
      childPoliciesDict: "{{  childPoliciesDict | combine({item: childPolicies | json_query(query_json)}) }}"
    vars:
      query_json: >
        {"childName": json.items[{{item}}].name, "policyID": json.items[{{item}}].id,"httpProtocolCompliance": json.items[{{item}}].sectionReference.items[?childInheritanceStatus=='declined'&&name=='http-protocol-compliance'].childInheritanceStatus, "origEnabledState": json.items[{{item}}].httpProtocolsReference.items[?name=='Header name with no header value'].enabled}
    loop: "{{ range(0, (numChildPolicies | int)) |list }}"

  - name: Print child policies dictionary 
    debug:
      msg: "{{ childPoliciesDict }}"
      verbosity: 1
  
  - name: Copy child policy dictionary to a local file as json
    copy:
      content: "{{ childPoliciesDict | to_nice_json }}"
      dest: "childPolicies.json"
    delegate_to: localhost

  - name: POST - BIG-IQ refresh token
    uri:
      url: "https://{{bigiq}}/mgmt/shared/authn/exchange"
      method: POST
      body:
        refreshToken:
          token: "{{bigiqTokens.refreshToken}}"
      body_format: json
      validate_certs: no
    delegate_to: localhost
    register: refreshBigiqTokens

  - name: Print result of refresh tokens
    debug:
      msg: "{{getBigiqTokens}}"
      verbosity: 1

  - name: Set_fact - create variable with access token and refreshToken
    set_fact:
      bigiqTokens: "{{ getBigiqTokens | json_query(query_json) }}"
    vars: 
      query_json: >
        {"accessToken": json.token.token, "refreshToken": json.refreshToken.token}

  - name: PATCH - to set "Header name with no header value" to either enable or disable
    uri:
      url: "https://{{bigiq}}/mgmt/cm/asm/working-config/policies/{{item.value.policyID}}/http-protocols/4dafc3c8-1e91-39ba-a20d-46c47cffa34d"
      method: PATCH
      validate_certs: no
      headers:
        X-F5-Auth-Token: "{{bigiqTokens.accessToken}}"
      body: 
        enabled: "{{stateOfHeadNoValue}}"
      body_format: json
    delegate_to: localhost
    loop: "{{ childPoliciesDict|dict2items }}"
    register: childPoliciesPatch
    when: item.value.httpProtocolCompliance != []
    # loop_control:
    #   pause: .5

  - name: print results of patch policies
    debug:  
      msg: "{{ childPoliciesPatch }}"
      verbosity: 1

  - name: Print child policies dict
    debug:
      msg: "{{ childPoliciesDict }}"
      verbosity: 1